#!/usr/bin/env python
import sys
import os
sys.path.append(sys.path[0]+'/files/')
from File import *
from Plot import *
from Common import *
import matplotlib.pyplot as mpl

def showDescription():
   print "Create a meteogram for a COMPS Netcdf output file\n"
   print "usage: meteo file [-l location] [-f imagefile] [-fs figSize]"
   print "[-noleg] [-noens] [-noprob]"
   print ""
   print green("Arguments:")
   print "   file:         Filename of COMPS file in NetCDF format"
   print "   location:     Draw meteogram for this location index (default 0)"
   print "   imagefile:    Save image to this filename"
   print "   figSize       Set figure size width,height (in inches). Default 8x6."
   print "   -noleg:       Don't show the legend"
   print "   -noens:       Don't show the ensemble"
   print "   -noprob:      Don't show the probaiblity lines"
   print "   -noobs:       Don't show observations"

if(len(sys.argv) == 1):
   showDescription()
   sys.exit()

ifile    = None
location = 0
ofile    = None
showLeg  = True
showEns  = True
showProb = True
showObs  = True
figSize = None

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-f"):
         ofile = sys.argv[i+1]
         i = i + 1
      elif(arg == "-l"):
         location = int(sys.argv[i+1])
         i = i + 1
      elif(arg == "-fs"):
         figSize = sys.argv[i+1]
         i = i + 1
      elif(arg == "-noleg"):
         showLeg = False
      elif(arg == "-noens"):
         showEns = False
      elif(arg == "-noprob"):
         showProb = False
      elif(arg == "-noobs"):
         showObs = False
   else:
      if(ifile == None):
         ifile = sys.argv[i]
      else:
         Common.error("Unrecognized flag: " + sys.argv[i])
   i = i + 1

if(ifile == None):
   print "Needs input file"
   sys.exit(1)

if(figSize != None):
   figSize = figSize.split(',')
   if(len(figSize) != 2):
      print "-fs figSize must be in the form: width,height"
      sys.exit(1)
   mpl.gcf().set_size_inches(int(figSize[0]), int(figSize[1]))

file = NetCdfFile(ifile,location=location)
pl = CdfPlot(file)
pl.setShowEns(showEns)
pl.setShowProb(showProb)
pl.setShowObs(showObs)

pl.plot(mpl.gca())
#mpl.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=None, hspace=None)

if(showLeg):
  leg = mpl.legend(bbox_to_anchor=(1, 1), loc=1, borderaxespad=0.)

if(ofile != None):
   mpl.savefig(ofile, bbox_inches='tight')
else:
   fig = mpl.gcf()
   fig.canvas.set_window_title(ifile)
   mpl.show()
