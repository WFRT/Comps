#!/usr/bin/python
import sys
import os
sys.path.append(sys.path[0]+'/files/')
from VerifFile import *
from VerifPlot import *
from VerifData import *
from Common import *
import matplotlib.pyplot as mpl
import textwrap


def showDescription(files=None):
   print "Compute verification scores for COMPS verification files\n"
   print "usage: verif files -m metric [-x x-dim] [-l locations] [-o offsets]"
   print "                     [-t training] [-r thresholds] [-s subplot-dim]"
   print "                     [-d start-date end-date] [-c clim]"
   print "                     [-leg legend] [-f imageFile] [-fs figSize] [-debug] "
   print "                     [-text | -map]"
   print ""
   print green("Arguments:")
   print "   files         One or more COMPS verification files in NetCDF format"
   print "   metric        Verification score to use. Either a score found in the files, or a"
   print "                 derived score such as: ets, roc"
   print "   x-dim         Plot this dimension on the x-axis: date, offset, location, locationId,"
   print "                 locationElev, locationLat, locationLon, or threshold. Does not"
   print "                 apply to all plots. Default is offset."
   print "   locations     Limit the verification to these location indices"
   print "   offsets       Limit the verification to these offset indices"
   print "   training      Remove this many days from the beginning of the verification"
   print "   threshold     Compute scores for this threshold (only used by some metrics)"
   print "   subplot-dim   Plot this dimension in separate subplots"
   print "   start-date    YYYYMMDD. Only use dates from this day and on"
   print "   end-date      YYYYMMDD. Only use dates up to and including this day"
   print "   clim          NetCDF containing climatology data. Subtract all forecasts and"
   print "                 obs with climatology values."
   print "   legend        Comma-separated list of legend titles"
   print "   imageFile     Save image to this filename"
   print "   figSize       Set figure size width,height (in inches). Default 8x6."
   print "   -debug        Show statistics about files"
   print "   -text         Show text output instead of plot (works for some plot types)"
   print "   -map          Show output on a map (works for some plot types)"
   print ""
   print green("Metrics (-m):")
   for t in Plot.getAllTypes():
      supportsTextMap = t.supportsCompute()
      desc = t.description()
      if(supportsTextMap):
         desc = desc +  " Supports -text and -map."
      name = Plot.getStaticName(t)
      print "   %-14s%s" % (name, textwrap.fill(desc, 80).replace('\n', '\n                 ')),
      print ""
   if(files != None and len(files) > 0):
      print ""
      print "   Or one of the following, which plots the raw score from the file:"
      file = File(ifiles[0])
      metrics = file.getMetrics()
      for metric in metrics:
         print "   " + metric

ifiles   = list()
ofile    = None
metric   = None
locations = None
training = 0
thresholds = None
startDate = None
endDate   = None
clim   = None
leg    = None
offsets = None
xdim = "offset"
sdim = None
figSize = None
debug = False
showText = False
showMap = False

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-debug"):
         debug = True
      elif(arg == "-text"):
         showText = True
      elif(arg == "-map"):
         showMap = True
      else:
         if(arg == "-f"):
            ofile = sys.argv[i+1]
         elif(arg == "-l"):
            locations = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-t"):
            training = int(sys.argv[i+1])
         elif(arg == "-x"):
            xdim = sys.argv[i+1]
         elif(arg == "-o"):
            offsets = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-leg"):
            leg = sys.argv[i+1]
         elif(arg == "-fs"):
            figSize = sys.argv[i+1]
         elif(arg == "-d"):
            startDate = int(sys.argv[i+1])
            endDate   = int(sys.argv[i+2])
            i = i + 1
         elif(arg == "-c"):
            clim = sys.argv[i+1]
         elif(arg == "-s"):
            sdim = sys.argv[i+1]
         elif(arg == "-r"):
            thresholds = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-f"):
            ofile = sys.argv[i+1]
         elif(arg == "-m"):
            metric = sys.argv[i+1]
         else:
            Common.error("Flag '" + sys.argv[i] + "' not recognized")
         i = i + 1
   else:
      ifiles.append(sys.argv[i])
   i = i + 1

if(len(sys.argv) == 1 or len(ifiles) == 0 or metric == None):
   showDescription(ifiles)
   sys.exit()

# Determine if combinations of options map sense
if(showText and showMap):
   Common.error("Only use one of -map and -text")
if(showMap):
   xdim = "location"

metricOrig = metric
metric = metric.lower()

# Determine which dates to use
files = list()
for ifile in ifiles:
   files.append(File(ifile))
if(clim != None):
   climFile = File(clim)
else:
   climFile = None

dates = files[0].getDates()
for i in range(1, len(files)):
   dates = np.intersect1d(dates, files[i].getDates())
if(clim != None):
   dates = np.intersect1d(dates, climFile.getDates())

dates = dates[range(training, len(dates))]
if(startDate != None):
   dates = [date for date in dates if date >= startDate and date <= endDate]

if(debug):
   print "Dates: %8d-%8d" % (min(dates),max(dates))

if(metric == "reliability"):
   pl = ReliabilityPlot(thresholds)
elif(metric == "pit"):
   pl = PitPlot(thresholds)
elif(metric == "spreadskill"):
   pl = SpreadSkillPlot()
# Contingency plots
elif(metric == "ets"):
   pl = EtsPlot(thresholds)
elif(metric == "hitrate"):
   pl = HitRatePlot(thresholds)
elif(metric == "falsealarm"):
   pl = FalseAlarmPlot(thresholds)
elif(metric == "threat"):
   pl = ThreatPlot(thresholds)
elif(metric == "biasfreq"):
   pl = BiasFreqPlot(thresholds)
elif(metric == "hanssenkuiper"):
   pl = HanssenKuiperPlot(thresholds)
elif(metric == "roc"):
   pl = RocPlot(thresholds)
elif(metric == "droc"):
   pl = DRocPlot(thresholds)
elif(metric == "droc0"):
   pl = DRoc0Plot(thresholds)
elif(metric == "corr"):
   pl = CorrPlot()
elif(metric == "stderror"):
   pl = StdErrorPlot()
elif(metric == "rmse"):
   pl = RmsePlot()
elif(metric == "cmae"):
   pl = CmaePlot()
elif(metric == "variability"):
   pl = VariabilityPlot()
elif(metric == "brier"):
   pl = BrierPlot(thresholds)
elif(metric == "map"):
   pl = MapPlot()
elif(metric == "obsfcst"):
   pl = ObsFcstPlot()
elif(metric == "num"):
   pl = NumPlot()
elif(metric == "within"):
   pl = WithinPlot(thresholds)
elif(metric == "trace"):
   pl = TracePlot()
elif(metric == "analog"):
   pl = AnalogPlot()
elif(metric == "error"):
   pl = ErrorPlot()
elif(metric == "timeseries"):
   pl = TimeseriesPlot()
elif(metric == "igndecomp"):
   pl = IgnDecompPlot(thresholds)
elif(metric == "econ"):
   pl = EconPlot(thresholds)
elif(metric == "dmb"):
   pl = DmbPlot()
else:
   pl = DefaultPlot(metricOrig)

if(xdim == "threshold" and not pl.supportsThreshold()):
   Common.error(pl.getClassName() + " does not support -x threshold")

for file in files:
   data = Data(file, offsets, locations, dates, climFile, by=xdim)
   pl.add(data)

if(figSize != None):
   figSize = figSize.split(',')
   if(len(figSize) != 2):
      print "-fs figSize must be in the form: width,height"
      sys.exit(1)
   mpl.gcf().set_size_inches(int(figSize[0]), int(figSize[1]))

if(showText):
   pl.text()
else:
   if(showMap):
      pl.map(mpl.gca())
   else:
      pl.plot(mpl.gca())
      if(leg != None):
         legs = leg.split(',')
         pl.legend(mpl.gca(), legs)
      else:
         pl.legend(mpl.gca())
   if(ofile != None):
      mpl.savefig(ofile, bbox_inches='tight')
   else:
      if(len(ifiles) == 1):
         fig = mpl.gcf()
         fig.canvas.set_window_title(ifiles[0])
      mpl.show()
