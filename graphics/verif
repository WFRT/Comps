#!/usr/bin/python
import sys
import os
sys.path.append(sys.path[0]+'/files/')
from VerifFile import *
from VerifPlot import *
from VerifData import *
import matplotlib.pyplot as mpl


def showDescription(files=None):
   print "Compute verification scores for COMPS verification files\n"
   print "usage: verif.py files -m metric [-x x-dim] [-l location] [-o offset]"
   print "                     [-t training] [-r thresholds] [-s subplot-dim]"
   print "                     [-d start-date end-date]"
   print "                     [-leg legend] [-f imagefile]"
   print ""
   print "Arguments:"
   print "   files         One or more COMPS verification files in NetCDF format"
   print "   metric        Verification score to use. Either a score found in the files, or a"
   print "                 derived score such as: ets, roc"
   print "   x-dim         Plot this dimension on the x-axis: date, offset, location. Does not"
   print "                 apply to all plots. Default is offset."
   print "   location      Limit the verification to this location index"
   print "   offset        Limit the verification to this offset index"
   print "   training      Remove this many days from the beginning of the verification"
   print "   threshold     Compute scores for this threshold (only used by some metrics)"
   print "   subplot-dim   Plot this dimension in separate subplots"
   print "   start-date    YYYYMMDD. Only use dates from this day and on"
   print "   end-date      YYYYMMDD. Only use dates up to and including this day"
   print "   legend        Comma-separated list of legend titles"
   print "   imagefile     Save image to this filename"
   print ""
   print "Metrics (-m):"
   for type in Plot.getAllTypes():
      print "   %-14s%s" % (Plot.getName(type), type.description())
   if(files != None and len(files) > 0):
      print ""
      print "   Or one of the following, which plots the raw score from the file:"
      file = File(ifiles[0])
      metrics = file.getMetrics()
      for metric in metrics:
         print "   " + metric

ifiles   = list()
ofile    = None
metric   = None
location = None
training = 0
thresholds = "0"
startDate = None
endDate   = None
leg    = None
offset = None
xdim = "offset"
sdim = None

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-f"):
         ofile = sys.argv[i+1]
      elif(arg == "-l"):
         location = int(sys.argv[i+1])
      elif(arg == "-t"):
         training = int(sys.argv[i+1])
      elif(arg == "-x"):
         xdim = sys.argv[i+1]
      elif(arg == "-o"):
         offset = int(sys.argv[i+1])
      elif(arg == "-leg"):
         leg = sys.argv[i+1]
      elif(arg == "-d"):
         startDate = int(sys.argv[i+1])
         endDate   = int(sys.argv[i+2])
         i = i + 1
      elif(arg == "-s"):
         sdim = sys.argv[i+1]
      elif(arg == "-r"):
         thresholds = sys.argv[i+1]
      elif(arg == "-f"):
         ofile = sys.argv[i+1]
      elif(arg == "-m"):
         metric = sys.argv[i+1]
      i = i + 1
   else:
      ifiles.append(sys.argv[i])
   i = i + 1

if(len(sys.argv) == 1 or len(ifiles) == 0 or metric == None):
   showDescription(ifiles)
   sys.exit()

if(len(ifiles) == 0):
   print "Needs at least one input file"
   sys.exit(1)
if(metric == None):
   print "No metric specified. Use one of:"
   file = File(ifiles[0])
   metrics = ['droc', 'roc', 'spreadSkill', 'reliability', 'correlation', 'pit', 'rmse', 'stderror', 'obsfcst']
   metrics = metrics + file.getMetrics()
   for metric in metrics:
      print "   " + metric
   sys.exit(1)

metricOrig = metric
metric = metric.lower()

# Determine which dates to use
files = list()
for ifile in ifiles:
   files.append(File(ifile))

dates = files[0].getDates()
for i in range(1, len(files)):
   dates = np.intersect1d(dates, files[i].getDates())

dates = dates[range(training, len(dates))]
if(startDate != None):
   dates = [date for date in dates if date >= startDate and date <= endDate]

thresholds = [float(i) for i in thresholds.split(",")]
if(metric == "reliability"):
   pl = ReliabilityPlot(thresholds)
elif(metric == "pit"):
   pl = PitPlot()
elif(metric == "spreadskill"):
   pl = SpreadSkillPlot()
elif(metric == "ets"):
   pl = EtsPlot(thresholds)
elif(metric == "roc"):
   pl = RocPlot(thresholds)
elif(metric == "droc"):
   pl = DRocPlot(thresholds)
elif(metric == "corr"):
   pl = CorrPlot()
elif(metric == "anomcorr"):
   pl = AnomCorrPlot()
elif(metric == "stderror"):
   pl = StdErrorPlot()
elif(metric == "rmse"):
   pl = RmsePlot()
elif(metric == "obsfcst"):
   pl = ObsFcstPlot()
elif(metric == "num"):
   pl = NumPlot()
elif(metric == "trace"):
   pl = TracePlot()
elif(metric == "error"):
   pl = ErrorPlot()
elif(metric == "timeseries"):
   pl = TimeseriesPlot()
else:
   pl = DefaultPlot(metricOrig)
for file in files:
   data = Data(file, offset, location, dates, by=xdim)
   pl.add(data)
pl.plot(mpl.gca())
if(leg != None):
   legs = leg.split(',')
   pl.legend(mpl.gca(), legs)
else:
   pl.legend(mpl.gca())
if(ofile != None):
   mpl.savefig(ofile, bbox_inches='tight')
else:
   if(len(ifiles) == 1):
      fig = mpl.gcf()
      fig.canvas.set_window_title(ifiles[0])
   mpl.show()
