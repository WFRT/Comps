#!/usr/bin/python
import sys
import os
sys.path.append(sys.path[0]+'/files/')
import Common
#from mpl_toolkits.basemap import Basemap
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as mpl
from scipy.io import netcdf
from matplotlib.mlab import griddata
from copy import deepcopy
import scipy.ndimage

def showDescription():
   print "Show contents of a COMPS NetCDF output file geographically\n"
   print "usage: map file -m metric [-c] [-e ens-index] [-o offset] [-f imagefile] [-r boundary]"
   print "           [-fs figSize] [-noaxis] [-nocb] [-nomargin]"
   print ""
   print "Arguments:"
   print "   file          Filename of COMPS file in NetCDF format"
   print "   metric        Which field should be shown?"
   print "   -c            Show elevation contours"
   print "   ens-index:    Show a specific ensemble member, or one of 'min', 'mean', 'max'"
   print "   offset        Only show a map for this offset."
   print "                 Otherwise use one subplot for each offset"
   print "   imagefile     Save image to this filename"
   print "   boundary      Set axes limits to lonW,LonE,LatS,LatN"
   print "   figSize       Set figure size width,height (in inches)"
   print "   -noaxis       Turn axes off"
   print "   -nocb         Turn colorbar off"
   print "   -nomargin     Remove margins"

if(len(sys.argv) == 1):
   showDescription()
   sys.exit()

def clean(data):
   data = data[:].astype(float)
   q = deepcopy(data)
   mask = np.where(q == -999);
   q[mask] = None
   mask = np.where(q < -100000);
   q[mask] = None
   mask = np.where(q > 1e30);
   q[mask] = None
   return q

offsets = None
showContour = False
ensIndex = None
ifile = None
ofile = None
boundary = None
figSize  = None
noAxis   = False
noCb     = False
noMargin = False
metric   = None

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-f"):
         ofile = sys.argv[i+1]
         i = i + 1
      if(arg == "-m"):
         metric = sys.argv[i+1]
         i = i + 1
      elif(arg == "-o"):
         offsets = Common.parseNumbers(sys.argv[i+1]) 
         i = i + 1
      elif(arg == "-e"):
         ensIndex= sys.argv[i+1]
         i = i + 1
      elif(arg == "-c"):
         showContour = True
      elif(arg == "-fs"):
         figSize = sys.argv[i+1]
         i = i + 1
      elif(arg == "-r"):
         boundary = sys.argv[i+1]
         i = i + 1
      elif(arg == "-noaxis"):
         noAxis = True
      elif(arg == "-nocb"):
         noCb = True
      elif(arg == "-nomargin"):
         noMargin = True
   else:
      if(ifile == None):
         ifile = sys.argv[i]
      elif(offsets == None):
         offsets = Common.parseNumbers(sys.argv[i]) 
      elif(ofile == None):
         ofile = sys.argv[i]
   i = i + 1

if(ifile == None):
   print "Needs input file"
   sys.exit(1)

f = netcdf.netcdf_file(ifile, 'r')
if('Lat' in f.variables):
   lats = clean(f.variables['Lat'][:])
   lons = clean(f.variables['Lon'][:])
else:
   lats = clean(f.variables['latitude'][:])
   lons = clean(f.variables['longitude'][:])

if(showContour):
   if('Elev' in f.variables):
      elevs = clean(f.variables['Elev'][:])
   else:
      elevs = clean(f.variables['altitude'][:])

obs = None
dets = None
# Daily forecast file
if(metric in f.variables):
   dets = clean(f.variables[metric])
   mdets = np.ma.masked_array(dets,np.isnan(dets))
   dets = np.mean(mdets,axis=0)
elif("Det" in f.variables):
   obs  = clean(f.variables['Observations'][:,:])
   dets = clean(f.variables['Det'][:,:])
# Assume this is a verification file
elif("obs" in f.variables):
   obs  = clean(f.variables['obs'])
   dets = clean(f.variables['fcst'])
   mobs  = np.ma.masked_array(obs,np.isnan(obs))
   mdets = np.ma.masked_array(dets,np.isnan(dets))
   # Average over all dates
   dets = np.mean(mdets,axis=0)
   obs  = np.mean(mobs,axis=0)

if(dets != None):
   N = len(dets)
else:
   N = 1

if(ensIndex == "min"):
   dets = np.squeeze(np.min(clean(f.variables['Ens'][:,:,:]),1))
elif(ensIndex == "mean"):
   dets = np.squeeze(np.mean(clean(f.variables['Ens'][:,:,:]),1))
elif(ensIndex == "max"):
   dets = np.squeeze(np.max(clean(f.variables['Ens'][:,:,:]),1))
elif(ensIndex != None):
   i = int(ensIndex)
   dets = np.squeeze(clean(f.variables['Ens'][:,i,:]))

#dets = emax-emin

N = len(dets)
if(offsets == None):
   offsets = range(0,N)
N = len(offsets)

if(figSize != None):
   figSize = figSize.split(',')
   if(len(figSize) != 2):
      print "-fs figSize must be in the form: width,height"
      sys.exit(1)
   mpl.gcf().set_size_inches(int(figSize[0]), int(figSize[1]))

if(boundary != None):
   boundary = boundary.split(',')
   if(len(boundary) != 4):
      print "-r boundary must be in the form: lonW,lonE,latS,latN"
      sys.exit(1)

variable = "unknown"
if(hasattr(f, 'Variable')):
   variable = getattr(f, 'Variable') 

# Draw one subplot for each offset
for t in range(0, len(offsets)):
   offset = offsets[t]
   Common.subplot(t,len(offsets))
   if(dets != None):
      dets0 = dets[offset,]
      valid = np.where(np.isnan(dets0) == 0);

      N = np.ceil(np.sqrt(len(lons[valid])))
      dx = 0#max(lons[valid]) - min(lons[valid])
      dy = 0#max(lats[valid]) - min(lats[valid])
      xi = np.linspace(min(lons[valid])-dx/5.0, max(lons[valid])+dx/5.0,N*3)
      yi = np.linspace(min(lats[valid])-dy/5.0, max(lats[valid])+dy/5.0,N*3)
      zi = griddata(lons[valid], lats[valid], dets0[valid], xi, yi)
      #mpl.plot(lons[valid], lats[valid], 'k.')
      if(showContour):
         elevsi = griddata(lons, lats, elevs, xi, yi)
         mpl.contourf(xi, yi, elevsi, range(0,2000,100), cmap=mpl.cm.Greys)
         mpl.contour(xi, yi, elevsi, range(0,2000,100), colors="black")
         mpl.contour(xi, yi, elevsi, range(0,2000,500), linewidths=2, colors="black")
      #mpl.contourf(xi, yi, zi, np.linspace(-0.5,0.5,101))

      varmin = np.min(zi[:])
      varmax = np.max(zi[:]) 
      edges = np.linspace(varmin, varmax, 21)
      if(variable == "Precip"):
         cmap = mpl.cm.Blues
         if(varmax < 1):
            edges = np.linspace(0,1, 11)
         elif(varmax < 5):
            edges = np.linspace(0,5, 11)
         elif(varmax < 10):
            edges = np.linspace(0,10, 11)
         else:
            edges = np.linspace(0,varmax, 16)
         #edges = np.linspace(0, 3, 21)
         edges[0] = 0.03
         mpl.contour(xi, yi, zi, edges, colors="#6699FF", alpha=0.8, linewidths=2, zorder=110)
         mpl.contour(xi, yi, zi, [-1,edges[0]], colors="#6699FF", alpha=0.8, linewidths=4, zorder=110)
         mpl.contourf(xi, yi, zi, edges, cmap=cmap, alpha=0.85, zorder=100)
      else:
         mpl.contourf(xi, yi, zi, 50)
      if(len(offsets)==1):
         cb = mpl.colorbar()

      #mpl.contourf(xi, yi, zi, np.linspace(0, 20, 9))
      #mpl.clim([0,20]) 
   dets0 = dets[offset,]
   valid = np.where(np.isnan(dets0) == 0);

   N = np.ceil(np.sqrt(len(lons[valid])))
   dx = 0#max(lons[valid]) - min(lons[valid])
   dy = 0#max(lats[valid]) - min(lats[valid])
   xi = np.linspace(min(lons[valid])-dx/5.0, max(lons[valid])+dx/5.0,N*3)
   yi = np.linspace(min(lats[valid])-dy/5.0, max(lats[valid])+dy/5.0,N*3)
   zi = griddata(lons[valid], lats[valid], dets0[valid], xi, yi)
   if(showContour):
      elevsi = griddata(lons, lats, elevs, xi, yi)
      mpl.contour(xi, yi, elevsi, colors="black")
   #mpl.contourf(xi, yi, zi, range(0,25,2))
   if(boundary != None):
      mpl.xlim([float(boundary[0]),float(boundary[1])])
      mpl.ylim([float(boundary[2]),float(boundary[3])])
   #mpl.plot(lons, lats, 'k.')

   # Plot observations
   if(obs != None):
      for i in range(0, len(obs[offset,])):
         if(obs[offset,i] != None and not np.isnan(obs[offset,i])):
            string = "%2.1f" % (obs[offset,i])#int(round(obs[offset,i]))
            mpl.text(lons[i], lats[i], string, color='r', zorder=120)
            string = "%2.1f" % (dets[offset,i])#int(round(obs[offset,i]))
            mpl.text(lons[i], lats[i], string, color='g', verticalalignment="top", zorder=120)
            mpl.plot(lons[i], lats[i], 'r.', zorder=120)
   else:
      mpl.plot(lons, lats, 'ko')
   if(noAxis):
      mpl.gca().get_xaxis().set_visible(False)
      mpl.gca().get_yaxis().set_visible(False)

#if(len(offsets) == 1 and dets != None and not noCb):
   #cb = mpl.colorbar()
   #cb.set_clim(vmin=0,vmax=20)
if(noMargin):
   Common.removeMargin()
if(ofile != None):
   mpl.savefig(ofile, bbox_inches='tight')
else:
   fig = mpl.gcf()
   fig.canvas.set_window_title(ifile)
   mpl.show()
