#SetOption('implicit_cache', 1)

############
# Settings #
############
libPath         = ['/usr/local/lib', '/usr/local/boost/lib', '/usr/lib/', '/usr/local/gtest-1.6.0/lib']
cppPath         = ['src/', '/usr/local/include/', '/usr/local/boost/include', '/usr/include/', '/usr/local/gtest-1.6.0/include']
requiredLibs    = ['netcdf', 'netcdf_c++', 'm']
boostLibs       = ['boost_system', 'boost_filesystem']
optionalLibs    = ['grib_api', 'jasper', 'ncurses', 'gtest']
requiredHeaders = ['netcdf.hh', 'stdio.h']
cppFlags        = '-Wall -Wno-reorder -Wno-sign-compare'

###########################

Import('env')
Import('exeDir')
Import('debug')

SConscript("local.scons", exports={'env': env})

libs            = requiredLibs + optionalLibs

# Set environment variables
env.Append(LIBPATH  = libPath)
env.Append(CPPFLAGS = cppFlags)
env.Append(CPPPATH  = cppPath)

########################
# Configuration checks #
########################
if not env.GetOption('clean'):
   # Check for headers
   config = Configure(env)
   for header in requiredHeaders:
      if not config.CheckCXXHeader(header):
         print 'ERROR: Cannot find ' + header

   # Check for libraries
   for lib in requiredLibs:
      if not config.CheckLib(lib):
         print 'ERROR: lib' + lib + ' required'
         exit()

   # Check for boost libraries
   for lib in boostLibs:
      if not config.CheckLib(lib):
         if not config.CheckLib(lib + '-mt'):
            print 'ERROR: ' + lib + ' not found'
            exit()

   # Check for GRIB
   if not config.CheckLib('grib_api'):
      print "WARNING: 'grib_api' library not found. Compiling without GRIB support."
   else:
      config.env.Append(CPPDEFINES = '-DWITH_GRIB')

   # Check for gtest
   if config.CheckLib('gtest'):
      print "Compiling with Google test suite."
      config.env.Append(CPPDEFINES = '-DWITH_GTEST')

   # Check for NCurses
   if not config.CheckLib('ncurses'):
      print "WARNING: 'ncurses' library not found. Compiling without ncurses support."
   else:
      config.env.Append(CPPDEFINES = '-DWITH_NCURSES')
   env = config.Finish()

# Components
folders = Split('Inputs Correctors Selectors Downscalers DetMetrics Averagers Calibrators Configurations Continuous Discretes BaseDistributions Estimators Metrics Outputs ParameterIos Transforms Variables Uncertainties Smoothers Interpolators Measures Loggers Qcs Regions')
objs =[]
for folder in folders:
   obj = env.Object(Glob('src/' + folder + '/*.cpp'))
   objs = objs + [obj]
core           = env.Object(Glob('src/*.cpp'))

# Test targets
testTargets    = Glob('src/Tests/*.cpp')
for testTarget in testTargets:
   obj = env.Object(testTarget)
   testTarget = str(testTarget)
   # Determine the name of the test target
   slashIndex = 0
   dotIndex   = 0
   for i in range(1,len(testTarget)):
      if(testTarget[i] == '/'):
         slashIndex = i
      if(testTarget[i] == '.'):
         dotIndex = i
   testTarget = testTarget[(slashIndex+1):dotIndex]
   if(debug):
      testName = exeDir + '/tests/' + testTarget + '_debug.exe'
   else:
      testName = exeDir + '/tests/' + testTarget + '.exe'
   testObjects = [obj] + objs + [core]
   testProgram = env.Program(testName, testObjects)

compsDriver    = env.Object(Glob('src/Drivers/Comps.cpp'))
convertDriver  = env.Object(Glob('src/Drivers/Convert.cpp'))
infoDriver     = env.Object(Glob('src/Drivers/Info.cpp'))
comps          = [compsDriver] + objs + [core]
convert        = [convertDriver] + objs + [core]
info           = [infoDriver] + objs + [core]
if(debug):
   compsName   = exeDir + '/comps_debug.exe'
   convertName = exeDir + '/convert_debug.exe'
   infoName    = exeDir + '/info_debug.exe'
else:
   compsName   = exeDir + '/comps.exe'
   convertName = exeDir + '/convert.exe'
   infoName    = exeDir + '/info.exe'
compsExe   = env.Program(compsName, comps)
convertExe = env.Program(convertName, convert)
infoExe    = env.Program(infoName, info)
