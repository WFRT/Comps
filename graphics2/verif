#!/usr/bin/env python
import sys
import os
from Data import *
import Output
import Metric
from Common import *
import matplotlib.pyplot as mpl
import textwrap

def showDescription(data=None):
   print "Compute verification scores for COMPS verification files\n"
   print "usage: verif files -m metric [-x x-dim] [-r thresholds]"
   print "                 [-l locationIds] [-llrange latLonRange]"
   print "                 [-o offsets] [-d start-date end-date]"
   print "                 [-t training] [-c clim] [-C Clim]"
   print "                 [-type type] [-leg legend]"
   print "                 [-f imageFile] [-fs figSize]"
   print "                 [-b binType] [-nomargin] [-debug]"
   print "                 [-ms markerSize] [-lw lineWidth] [-xrot XRotation]"
   print "                 [-tickfs tickFontSize] [-labfs labFontSize] [-legfs legFontSize]"
   print "                 [-majlth MajorTickLength] [-minlth MinorTickLength] [-majwid MajorTickWidth]"
   print "                 [-bot Bottom] [-top Top] [-left Left] [-right Right]"
   print "                 [-sp]"
   #print "                 [-pad Pad]"
   print ""
   print green("Arguments:")
   print "   files         One or more COMPS verification files in NetCDF format."
   print "   metric        Verification score to use. See available metrics below."
   print "   x-dim         Plot this dimension on the x-axis: date, offset, location, locationId,"
   print "                 locationElev, locationLat, locationLon, threshold, or none. Not supported by"
   print "                 all metrics. If not specified, then a default is used based on the metric."
   print "                 'none' collapses all dimensions and computes one value."
   print "   thresholds    Compute scores for these thresholds (only used by some metrics)."
   print "   locationIds   Limit the verification to these location IDs."
   print "   latLonRange   Limit the verification to locations within minlon,maxlon,minlat,maxlat."
   print "   offsets       Limit the verification to these offsets (in hours)."
   print "   start-date    YYYYMMDD. Only use dates from this day and on"
   print "   end-date      YYYYMMDD. Only use dates up to and including this day"
   print "   training      Remove this many days from the beginning of the verification."
   print "   clim          NetCDF containing climatology data. Subtract all forecasts and"
   print "                 obs with climatology values."
   print "   Clim          NetCDF containing climatology data. Divide all forecasts and"
   print "                 obs by climatology values."
   print "   type          One of 'plot' (default) 'text' or 'map'."
   print "   legend        Comma-separated list of legend titles"
   print "   imageFile     Save image to this filename"
   print "   figSize       Set figure size width,height (in inches). Default 8x6."
   print "   binType       One of 'below', 'within', or 'above'. For threshold plots (ets, hit, within, etc)"
   print "                 'below/above' computes frequency below/above the threshold, and 'within' computes"
   print "                 the frequency between consecutive thresholds."
   print "   -nomargin     Remove margins (whitespace) in the plot"
   print "                 not x[i] <= T."
   print "   -debug        Show statistics about files"
   print "   markerSize    How big should markers be?"
   print "   lineWidth     How wide should lines be?"
   print "   XRotation     Rotation angle for x-axis labels"
   print "   tickFontSize  Font size for axis ticks"
   print "   labFontSize   Font size for axis labels"
   print "   legFontSize   Font size for legend"
   print "   MajorTickLength  Length of major tick marks"
   print "   MinorTickLength  Length of minor tick marks"
   print "   MajorTickWidth   Adjust the thickness of the major tick marks"
   print "   Bottom        Bottom boundary location for saved figure [range 0-1]"
   print "   Top           Top boundary location for saved figure [range 0-1]"
   print "   Left          Left boundary location for saved figure [range 0-1]"
   print "   Right         Right boundary location for saved figure [range 0-1]"
   print "   -sp           Show a line indicating the perfect score"
   print ""
   metrics = Metric.getAllMetrics()
   outputs = Output.getAllOutputs()
   print Common.green("Metrics (-m):")
   for m in metrics+outputs:
      name = m[0].lower()
      desc = m[1].summary()
      if(desc != ""):
         print "   %-14s%s" % (name, textwrap.fill(desc, 80).replace('\n', '\n                 ')),
         print ""
   if(data != None):
      print ""
      print "   Or one of the following, which plots the raw score from the file:"
      metrics = data.getMetrics()
      for metric in metrics:
         print "   " + metric

############
# Defaults #
############
ifiles   = list()
ofile    = None
metric   = None
locations = None
latlonRange = None
training = 0
thresholds = None
startDate = None
endDate   = None
clim   = None
climType = "subtract"
leg    = None
offsets = None
xdim = None
sdim = None
figSize = None
debug = False
showText = False
showMap = False
noMargin = False
binType     = None
markerSize = None
lineWidth = None
tickFontSize  = None
labFontSize  = None
legFontSize  = None
type = "plot"
XRotation = None
MajorLength = None
MinorLength = None
MajorWidth = None
Bottom = None
Top = None
Right = None
Left = None
Pad = None
showPerfect = None

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-debug"):
         debug = True
      elif(arg == "-nomargin"):
         noMargin = True
      elif(arg == "-sp"):
         showPerfect = True
      else:
         if(arg == "-f"):
            ofile = sys.argv[i+1]
         elif(arg == "-l"):
            locations = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-llrange"):
            latlonRange = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-t"):
            training = int(sys.argv[i+1])
         elif(arg == "-x"):
            xdim = sys.argv[i+1]
         elif(arg == "-o"):
            offsets = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-leg"):
            leg = sys.argv[i+1]
         elif(arg == "-b"):
            binType = sys.argv[i+1]
         elif(arg == "-type"):
            type = sys.argv[i+1]
         elif(arg == "-fs"):
            figSize = sys.argv[i+1]
         elif(arg == "-d"):
            startDate = int(sys.argv[i+1])
            endDate   = int(sys.argv[i+2])
            i = i + 1
         elif(arg == "-c"):
            clim = sys.argv[i+1]
            climType = "subtract"
         elif(arg == "-C"):
            clim = sys.argv[i+1]
            climType = "divide"
         elif(arg == "-s"):
            sdim = sys.argv[i+1]
         elif(arg == "-r"):
            thresholds = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-ms"):
            markerSize = float(sys.argv[i+1])
         elif(arg == "-lw"):
            lineWidth = float(sys.argv[i+1])
         elif(arg == "-tickfs"):
            tickFontSize = float(sys.argv[i+1])
         elif(arg == "-labfs"):
            labFontSize = float(sys.argv[i+1])
         elif(arg == "-legfs"):
            legFontSize = float(sys.argv[i+1])
         elif(arg == "-xrot"):
            XRotation = float(sys.argv[i+1])
         elif(arg == "-majlth"):
            MajorLength = float(sys.argv[i+1])
         elif(arg == "-minlth"):
	         MinorLength = float(sys.argv[i+1])
         elif(arg == "-majwid"):
            MajorWidth = float(sys.argv[i+1])
         elif(arg == "-bot"):
            Bottom = float(sys.argv[i+1])
         elif(arg == "-top"):
            Top = float(sys.argv[i+1])
         elif(arg == "-right"):
            Right = float(sys.argv[i+1])
         elif(arg == "-left"):
            Left = float(sys.argv[i+1])
         elif(arg == "-pad"):
            Pad = sys.argv[i+1]
         elif(arg == "-m"):
            metric = sys.argv[i+1]
         else:
            Common.error("Flag '" + sys.argv[i] + "' not recognized")
         i = i + 1
   else:
      ifiles.append(sys.argv[i])
   i = i + 1

if(leg != None):
   leg = leg.split(',')

# Limit dates
dates = None
if(startDate != None and endDate != None):
   dates = list()
   date = startDate
   while(date <= endDate):
      dates.append(date)
      date = Common.getDate(date, 1)


if(latlonRange != None and len(latlonRange) != 4):
   Common.error("-llRange <values> must have exactly 4 values")

if(len(ifiles) > 0):
   data = Data(ifiles, clim=clim, climType=climType, dates=dates, offsets=offsets,
         locations=locations, latlonRange=latlonRange, training=training)
else:
   data = None
if(len(sys.argv) == 1 or len(ifiles) == 0 or metric == None):
   showDescription(data)
   sys.exit()

if(figSize != None):
   figSize = figSize.split(',')
   if(len(figSize) != 2):
      print "-fs figSize must be in the form: width,height"
      sys.exit(1)

m = None

# Handle special plots
if(metric == "pithist"):
   m  = Metric.Pit("pit")
   pl = Output.PitHist(m)
elif(metric == "obsfcst"):
   pl = Output.ObsFcst()
elif(metric == "timeseries"):
   pl = Output.TimeSeries()
elif(metric == "qq"):
   pl = Output.QQ()
elif(metric == "cond"):
   pl = Output.Cond()
elif(metric == "against"):
   pl = Output.Against()
elif(metric == "count"):
   pl = Output.Count()
elif(metric == "scatter"):
   pl = Output.Scatter()
elif(metric == "change"):
   pl = Output.Change()
elif(metric == "droc"):
   pl = Output.DRoc()
elif(metric == "droc0"):
   pl = Output.DRoc0()
elif(metric == "drocnorm"):
   pl = Output.DRocNorm()
elif(metric == "reliability"):
   pl = Output.Reliability()
else:
   # Standard plots
   '''
   # Attempt at automating
   metrics = Metric.getAllMetrics()
   m = None
   for mm in metrics:
      if(metric == mm[0].lower() and mm[1].isStandard()):
         m = mm[1]()
         break
   if(m == None):
      m = Metric.Mean(metric)
      '''

   # Determine metric
   if(metric == "rmse"):
      m = Metric.Rmse()
   elif(metric == "rmsf"):
      m = Metric.Rmsf()
   elif(metric == "cmae"):
      m = Metric.Cmae()
   elif(metric == "dmb"):
      m = Metric.Dmb()
   elif(metric == "std"):
      m = Metric.Std()
   elif(metric == "num"):
      m = Metric.Num()
   elif(metric == "corr"):
      m = Metric.Corr()
   elif(metric == "bias"):
      m = Metric.Bias()
   elif(metric == "ef"):
      m = Metric.Ef()
   elif(metric == "maxobs"):
      m = Metric.MaxObs()
   elif(metric == "minobs"):
      m = Metric.MinObs()
   elif(metric == "maxfcst"):
      m = Metric.MaxFcst()
   elif(metric == "minfcst"):
      m = Metric.MinFcst()
   elif(metric == "stderror"):
      m = Metric.StdError()
   elif(metric == "mae"):
      m = Metric.Mae()
   # Contingency metrics
   elif(metric == "ets"):
      m = Metric.Ets()
   elif(metric == "threat"):
      m = Metric.Threat()
   elif(metric == "pc"):
      m = Metric.Pc()
   elif(metric == "diff"):
      m = Metric.Diff()
   elif(metric == "edi"):
      m = Metric.Edi()
   elif(metric == "sedi"):
      m = Metric.Sedi()
   elif(metric == "eds"):
      m = Metric.Eds()
   elif(metric == "seds"):
      m = Metric.Seds()
   elif(metric == "biasfreq"):
      m = Metric.BiasFreq()
   elif(metric == "hss"):
      m = Metric.Hss()
   elif(metric == "baserate"):
      m = Metric.BaseRate()
   elif(metric == "yulesq"):
      m = Metric.YulesQ()
   elif(metric == "or"):
      m = Metric.Or()
   elif(metric == "lor"):
      m = Metric.Lor()
   elif(metric == "yulesq"):
      m = Metric.YulesQ()
   elif(metric == "kss"):
      m = Metric.Kss()
   elif(metric == "hit"):
      m = Metric.Hit()
   elif(metric == "miss"):
      m = Metric.Miss()
   elif(metric == "fa"):
      m = Metric.Fa()
   elif(metric == "far"):
      m = Metric.Far()
   # Other threshold
   elif(metric == "brier"):
      m = Metric.Brier()
   elif(metric == "within"):
      m = Metric.Within()
   else:
      m = Metric.Mean(metric)

   # Output type
   if(type == "plot" or type == "text" or type == "map"):
      pl = Output.Default(m)
   else:
      Common.error("Type not understood")

# Rest dimension of '-x' is not allowed
if(xdim != None and not pl.supportsX()):
   Common.warning(metric + " does not support -x. Ignoring it.")
   thresholds = None
   xdim = None

# Reset dimension if 'threshold' is not allowed
if(xdim == "threshold" and ((not pl.supportsThreshold()) or (not m.supportsThreshold()))):
   Common.warning(metric + " does not support '-x threshold'. Ignoring it.")
   thresholds = None
   xdim = None

# Create thresholds if needed
if((thresholds == None) and (pl.requiresThresholds() or (m != None and m.requiresThresholds()))):
   data.setAxis("none")
   obs  = data.getScores("obs")[0]
   fcst = data.getScores("fcst")[0]
   smin = min(min(obs), min(fcst))
   smax = max(max(obs), max(fcst))
   thresholds = np.linspace(smin,smax,10)
   Common.warning("Missing '-r <thresholds>'. Automatically setting thresholds.")

# Set plot parameters
if(markerSize != None):
   pl.setMarkerSize(markerSize)
if(lineWidth != None):
   pl.setLineWidth(lineWidth)
if(labFontSize != None):
   pl.setLabFontSize(labFontSize)
if(legFontSize != None):
   pl.setLegFontSize(legFontSize)
if(tickFontSize != None):
   pl.setTickFontSize(tickFontSize)
if(XRotation != None):
   pl.setXRotation(XRotation)
if(MajorLength != None):
   pl.setMajorLength(MajorLength)
if(MinorLength != None):
   pl.setMinorLength(MinorLength)
if(MajorWidth != None):
   pl.setMajorWidth(MajorWidth)
if(Bottom != None):
   pl.setBottom(Bottom)
if(Top != None):
   pl.setTop(Top)
if(Right != None):
   pl.setRight(Right)
if(Left != None):
   pl.setLeft(Left)
if(Pad != None):
   pl.setPad(None)
if(binType != None):
   pl.setBinType(binType)
if(showPerfect != None):
   pl.setShowPerfect(showPerfect)
pl.setFilename(ofile)
pl.setThresholds(thresholds)
pl.setLegend(leg)
pl.setFigsize(figSize)
pl.setAxis(xdim)
pl.setShowMargin(not noMargin)

if(type == "text"):
   pl.text(data)
elif(type == "map"):
   pl.map(data)
else:
   pl.plot(data)
