#!/usr/bin/python
import sys
import os
from Data import *
import Output
import Metric
from Common import *
import matplotlib.pyplot as mpl
import textwrap

def showDescription(data=None):
   print "Compute verification scores for COMPS verification files\n"
   print "usage: verif files -m metric [-x x-dim] [-l locations] [-o offsets]"
   print "                     [-t training] [-r thresholds] [-s subplot-dim]"
   print "                     [-d start-date end-date] [-c clim]"
   print "                     [-leg legend] [-f imageFile] [-fs figSize] [-debug]"
   print "                     [-type type] [-nomargin] [-binned]"
   print "                     [-ms markerSize] [-lw lineWidth]"
   print ""
   print green("Arguments:")
   print "   files         One or more COMPS verification files in NetCDF format"
   print "   metric        Verification score to use. Either a score found in the files, or a"
   print "                 derived score such as: ets, roc"
   print "   x-dim         Plot this dimension on the x-axis: date, offset, location, locationId,"
   print "                 locationElev, locationLat, locationLon, or none. Not supported by"
   print "                 all metrics. Default is offset."
   print "   locations     Limit the verification to these location indices"
   print "   offsets       Limit the verification to these offset indices"
   print "   training      Remove this many days from the beginning of the verification"
   print "   threshold     Compute scores for this threshold (only used by some metrics)"
   print "   subplot-dim   Plot this dimension in separate subplots"
   print "   start-date    YYYYMMDD. Only use dates from this day and on"
   print "   end-date      YYYYMMDD. Only use dates up to and including this day"
   print "   clim          NetCDF containing climatology data. Subtract all forecasts and"
   print "                 obs with climatology values."
   print "   legend        Comma-separated list of legend titles"
   print "   imageFile     Save image to this filename"
   print "   figSize       Set figure size width,height (in inches). Default 8x6."
   print "   -debug        Show statistics about files"
   print "   -type         One of 'plot' (default) 'text' or 'map'."
   print "   -nomargin     Remove margins (whitespace) in the plot"
   print "   -binned       For threshold plots (ets, hit, within, etc) treat the threshold"
   print "                 values as bin edges. I.e an event is defined as x[i] <= T < x[i+1]"
   print "                 not x[i] <= T."
   print "   lineWidth     How wide should lines be?"
   print "   markerSize    How big should markers be?"
   print ""
   metrics = Metric.getAllMetrics()
   outputs = Output.getAllOutputs()
   print Common.green("Metrics (-m):")
   for m in metrics+outputs:
      name = m[0].lower()
      desc = m[1].description()
      if(desc != ""):
         print "   %-14s%s" % (name, textwrap.fill(desc, 80).replace('\n', '\n                 ')),
         print ""
   if(data != None):
      print ""
      print "   Or one of the following, which plots the raw score from the file:"
      metrics = data.getMetrics()
      for metric in metrics:
         print "   " + metric

############
# Defaults #
############
ifiles   = list()
ofile    = None
metric   = None
locations = None
training = 0
thresholds = None
startDate = None
endDate   = None
clim   = None
leg    = None
offsets = None
xdim = "offset"
sdim = None
figSize = None
debug = False
showText = False
showMap = False
noMargin = False
binned     = False
markerSize = None
lineWidth = None
type = "plot"

# Read command line arguments
i = 1
while(i < len(sys.argv)):
   arg = sys.argv[i]
   if(arg[0] == '-'):
      # Process option
      if(arg == "-debug"):
         debug = True
      elif(arg == "-nomargin"):
         noMargin = True
      elif(arg == "-binned"):
         binned = True
      else:
         if(arg == "-f"):
            ofile = sys.argv[i+1]
         elif(arg == "-l"):
            locations = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-t"):
            training = int(sys.argv[i+1])
         elif(arg == "-x"):
            xdim = sys.argv[i+1]
         elif(arg == "-o"):
            offsets = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-leg"):
            leg = sys.argv[i+1]
         elif(arg == "-type"):
            type = sys.argv[i+1]
         elif(arg == "-fs"):
            figSize = sys.argv[i+1]
         elif(arg == "-d"):
            startDate = int(sys.argv[i+1])
            endDate   = int(sys.argv[i+2])
            i = i + 1
         elif(arg == "-c"):
            clim = sys.argv[i+1]
         elif(arg == "-s"):
            sdim = sys.argv[i+1]
         elif(arg == "-r"):
            thresholds = Common.parseNumbers(sys.argv[i+1])
         elif(arg == "-f"):
            ofile = sys.argv[i+1]
         elif(arg == "-ms"):
            markerSize = int(sys.argv[i+1])
         elif(arg == "-lw"):
            lineWidth = int(sys.argv[i+1])
         elif(arg == "-m"):
            metric = sys.argv[i+1]
         else:
            Common.error("Flag '" + sys.argv[i] + "' not recognized")
         i = i + 1
   else:
      ifiles.append(sys.argv[i])
   i = i + 1

if(leg != None):
   leg = leg.split(',')

# Limit dates
dates = None
if(startDate != None and endDate != None):
   dates = list()
   date = startDate
   while(date <= endDate):
      dates.append(date)
      date = Common.getDate(date, 1)

if(len(ifiles) > 0):
   data = Data(ifiles, clim=clim, climType="subtract", dates=dates, offsets=offsets, locations=locations, training=training)
else:
   data = None
if(len(sys.argv) == 1 or len(ifiles) == 0 or metric == None):
   showDescription(data)
   sys.exit()

if(metric == "cond"):
   if(xdim != "threshold"):
      Common.warning("'-m cond' implies '-x threshold'")
      xdim = "threshold"
   if(binned == False):
      Common.warning("'-m cond' implies '-binned'")
      binned = True

if(xdim == "threshold" and thresholds == None):
   if(thresholds == None or len(thresholds) == 0):
      obs  = data.getScores("obs")[0]
      fcst = data.getScores("fcst")[0]
      smin = min(min(obs), min(fcst))
      smax = max(max(obs), max(fcst))
      thresholds = np.linspace(smin,smax,10)
   Common.warning("Missing '-r <thresholds>'. Automatically setting thresholds.")

threshold = None
if(thresholds != None):
   threshold = thresholds[0]

m = None

# Handle special plots
if(metric == "pithist"):
   m  = Metric.Pit("pit")
   pl = Output.PitHist(m, filename=ofile, leg=leg)
elif(metric == "obsfcst"):
   pl = Output.ObsFcst(xdim, filename=ofile, leg=leg)
elif(metric == "timeseries"):
   pl = Output.TimeSeries(filename=ofile, leg=leg)
elif(metric == "qq"):
   pl = Output.QQ(filename=ofile, leg=leg)
elif(metric == "cond"):
   m  = Metric.Conditional()
   pl = Output.Cond(m, thresholds, binned, filename=ofile, leg=leg)
elif(metric == "scatter"):
   pl = Output.Scatter(filename=ofile, leg=leg)
elif(metric == "droc"):
   pl = Output.DRoc(threshold, filename=ofile, leg=leg)
elif(metric == "droc0"):
   pl = Output.DRoc0(threshold, filename=ofile, leg=leg)
elif(metric == "drocnorm"):
   pl = Output.DRocNorm(threshold, filename=ofile, leg=leg)
elif(metric == "reliability"):
   pl = Output.Reliability(threshold, filename=ofile, leg=leg)
else:
   # Standard plots

   # Determine metric
   if(metric == "rmse"):
      m = Metric.Rmse()
   elif(metric == "cmae"):
      m = Metric.Cmae()
   elif(metric == "dmb"):
      m = Metric.Dmb()
   elif(metric == "std"):
      m = Metric.Std("fcst")
   elif(metric == "num"):
      m = Metric.Num()
   elif(metric == "corr"):
      m = Metric.Corr()
   elif(metric == "bias"):
      m = Metric.Bias()
   elif(metric == "stderror"):
      m = Metric.StdError()
   elif(metric == "mae"):
      m = Metric.Mae()
   # Contingency metrics
   elif(metric == "ets"):
      m = Metric.Ets()
   elif(metric == "threat"):
      m = Metric.Threat()
   elif(metric == "biasfreq"):
      m = Metric.BiasFreq()
   elif(metric == "baserate"):
      m = Metric.BaseRate()
   elif(metric == "oddsratioss"):
      m = Metric.OddsRatioSS()
   elif(metric == "hanssenkuiper"):
      m = Metric.HanssenKuiper()
   elif(metric == "hit"):
      m = Metric.Hit()
   elif(metric == "fa"):
      m = Metric.FalseAlarm()
   # Other threshold
   elif(metric == "brier"):
      m = Metric.Brier()
   elif(metric == "within"):
      m = Metric.Within()
   else:
      m = Metric.Mean(metric)

   if(xdim == "threshold" and not m.supportsX()):
      Common.warning("'-x threshold' doesn't make sense with this metric")
   if(m.requiresThresholds() and (thresholds == None)):
      Common.error("This metric requires '-r <thresholds>'")


   # Output type
   if(type == "plot" or type == "text"):
      pl = Output.LinePlot(m,xdim, thresholds, binned=binned, filename=ofile, leg=leg)
   elif(type == "hist"):
      pl = Output.PitHist(m, filename=ofile, leg=leg)
   else:
      Common.error("Type not understood")
if(xdim != "offset" and not pl.supportsX()):
   Common.warning(metric + " does not support -x. Ignoring it.")
if(xdim == "threshold" and ((m != None and not m.supportsThreshold()) or not pl.supportsThreshold())):
   Common.warning("'-x threshold' doesn't make sense with this plot")

if(markerSize != None):
   pl.setMarkerSize(markerSize)
if(lineWidth != None):
   pl.setLineWidth(lineWidth)
if(type == "text"):
   pl.text(data)
else:
   pl.plot(data)
